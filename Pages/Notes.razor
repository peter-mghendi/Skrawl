@page "/notes"
@attribute [Authorize]
@inject INoteService NoteService

<div class="d-flex mb-4">
<h3 class="mr-auto">Notes</h3>
<button class="btn btn-outline-success mr-2" @onclick="@(async () => await ShowEditNoteAsync())" disabled=@loading>
    <span class="fas fa-plus mr-1"></span> New
</button>
<button class="btn btn-outline-primary" @onclick="@(async () => await RefreshNotesAsync())" disabled=@loading>
    @if (loading) {
        <span class="spinner-grow spinner-grow-sm mr-1" role="status"></span>
    } 
    @(loading ? "Refreshing..." : "Refresh")
</button>
</div>

@if (loading)
{
    <button class="btn" disabled>
        <span class="spinner-border spinner-border-sm mr-1" role="status"></span>
        Loading...
    </button>
}
else
{
    <ul class="list-group list-group-flush">
        @foreach (var note in notes)
        {
            <li class="list-group-item">
                <div class="d-flex">
                    <p class="lead mr-auto">@note.Title</p>

                    @if (!string.IsNullOrWhiteSpace(note.Body)) {
                        <button class="btn control" @onclick="() => ToggleExpandedItem(note.Id)">
                            <i class="fas fa-chevron-@(expandedItem == note.Id ? "up" : "down")"></i>
                        </button>
                    }    
                    <button class="btn control" @onclick="async () => await ShowEditNoteAsync(note)" disabled=@(deleting.Contains(note.Id))>
                        <i class="fas fa-edit"></i>
                    </button>
                    <button class="btn control" @onclick="async () => await DeleteNoteAsync(note.Id)" disabled=@(deleting.Contains(note.Id))>
                        @if (deleting.Contains(note.Id)) {
                            <span class="spinner-border spinner-border-sm mr-1" role="status"></span>
                        } 
                        else
                        {
                            <i class="fas fa-trash-alt"></i>
                        }
                    </button>
                </div>

                @if (!string.IsNullOrWhiteSpace(note.Body)) {
                    <p class="details text-muted mt-3 @(expandedItem == note.Id ? "" : "d-none")">@note.Body</p>
                }
            </li>
        }
    </ul>
}

@code {
    private long expandedItem = -1;
    private bool loading = false;
    private List<NoteDTO> notes = new List<NoteDTO>();
    private List<long> deleting = new List<long>();

    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshNotesAsync();
    }

    private async Task RefreshNotesAsync()
    {
        loading = true;
        try
        {
            notes = await NoteService.GetAllAsync();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        loading = false;
    }

    private void ToggleExpandedItem(long id)
    {
        expandedItem = (expandedItem == id) ? -1 : id;
    }

    async Task ShowEditNoteAsync(NoteDTO note = null)
    {
        bool isNew = note == null;
        var options = new ModalOptions() { Class = "blazored-modal container" };

        var parameters = new ModalParameters();
        parameters.Add(nameof(EditNote.Note), note);

        var formModal = Modal.Show<EditNote>((isNew ? "Create" : "Edit") + " Note", parameters, options);

        var data = (await formModal.Result).Data as NoteDTO;

        if (isNew) notes.Add(data);
        else notes[notes.FindIndex(n => n.Id == data.Id)] = data;
    }

    async Task DeleteNoteAsync(long id)
    {
        deleting.Add(id);

        try
        {
            var note = await NoteService.DeleteAsync(id);
            notes.RemoveAll(n => n.Id == note.Id);
        }
        catch (Exception)
        {
            deleting.Remove(id);
        }
    }
}