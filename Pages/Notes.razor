@page "/notes"
@attribute [Authorize]
@inject INoteService NoteService

<div class="d-flex mb-4">
<h3 class="mr-auto">Notes</h3>
<button class="btn btn-outline-success mr-2" @onclick="@(async () => await ShowEditNote())" disabled=@loading>
    <span class="fas fa-plus mr-1"></span> New
</button>
<button class="btn btn-outline-primary" @onclick="@(async () => await RefreshNotes())" disabled=@loading>
    @if (loading) {
        <span class="spinner-grow spinner-grow-sm mr-1" role="status"></span>
    } 
    @(loading ? "Refreshing..." : "Refresh")
</button>
</div>

@if (notes == null)
{
    <p><em>Loading...</em></p>
}
else
{
<ul class="list-group list-group-flush">
    @foreach (var note in notes)
    {
        <li class="list-group-item">
            <div class="d-flex">
            <p class="lead mr-auto">@note.Title</p>
            @if (!string.IsNullOrWhiteSpace(note.Body)) {
                <button class="btn" @onclick="() => ToggleExpandedItem(note.Id)">
                    <i class="fas fa-chevron-@(expandedItem == note.Id ? "up" : "down")"></i>
                </button>
            }    
            </div>

            @if (!string.IsNullOrWhiteSpace(note.Body)) {
                <p class="details @(expandedItem == note.Id ? "" : "d-none")">@note.Body</p>
            }
        </li>
    }
</ul>
}

@code {
    private long expandedItem = -1;
    private bool loading = false;
    private IList<NoteDTO> notes;

    [CascadingParameter] public IModalService Modal { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await RefreshNotes();
    }

    private async Task RefreshNotes()
    {
        loading = true;
        try
        {
            notes = await NoteService.GetAll();
        }
        catch (Exception ex)
        {
            Console.WriteLine(ex.Message);
        }
        loading = false;
    }

    private void ToggleExpandedItem(long id)
    {
        expandedItem = (expandedItem == id) ? -1 : id;
    }

    async Task ShowEditNote(long noteId = -1)
    {
        var options = new ModalOptions() { Class = "blazored-modal container" };

        var parameters = new ModalParameters();
        parameters.Add(nameof(EditNote.NoteId), noteId);

        var formModal = Modal.Show<EditNote>("Create Note", parameters, options);

        var result = await formModal.Result;

        if (result.Data is NoteDTO)
            notes.Add((NoteDTO) result.Data);
    }
}
